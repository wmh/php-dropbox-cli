#!/usr/bin/php
<?php
$home = getenv("HOME");
if (empty($home)) {
    die("The 'HOME' environment variable is required.");
}
error_reporting(E_ALL);
define("CURRENT_PATH", getcwd());

require_once __DIR__ .'/vendor/autoload.php';
use Kunnu\Dropbox\Dropbox;
use Kunnu\Dropbox\DropboxApp;
use Kunnu\Dropbox\DropboxFile;

$config_file = join('/', [$home, '.config', 'php-dropbox-cli', 'auth.json']);
$config = [];
if (file_exists($config_file)) {
    $config = json_decode(file_get_contents($config_file), true);
}
if (!isset($config['client_id']) || !isset($config['client_secret']) || !isset($config['access_token'])) {
    $client_id = readline('Enter the `App key` here: ');
    $client_secret = readline('Enter the `App secret` here: ');
    if ($client_id == '' || $client_secret == '') {
        return;
    }
    $app = new DropboxApp($client_id, $client_secret);
    $dropbox = new Dropbox($app);
    $authHelper = $dropbox->getAuthHelper();
    $authUrl = $authHelper->getAuthUrl();
    echo "-----\n";
    echo '1. Go to ', $authUrl, "\n";
    echo '2. Click "Allow" (you might have to log in first).', "\n";
    echo '3. Copy the authorization code.', "\n";
    $code = readline('Enter the authorization code here: ');
    if ($code == '') {
        return;
    }
    $accessToken = $authHelper->getAccessToken($code);
    $access_token = $accessToken->getToken();
    $config = [
        'client_id' => $client_id,
        'client_secret' => $client_secret,
        'access_token' => $access_token,
    ];
    mkdir(dirname($config_file), 0755, true);
    file_put_contents($config_file, json_encode($config));
}

$client_id = $config['client_id'];
$client_secret = $config['client_secret'];
$access_token = $config['access_token'];
$root = '';
$app = new DropboxApp($client_id, $client_secret, $access_token);
$dropbox = new Dropbox($app);

// my app start
if (!isset($argv[1])) {
    show_help();
    return;
}

define("DROPBOX_ROOT", $root);
switch ($argv[1]) {
    case "ls":
        $subpath = "";
        $filter = "";
        if (isset($argv[2])) {
            if (strpos($argv[2], "*") === false) {
                $subpath = "/". $argv[2];
            } elseif ($argv[2] === '*.') {
                $filter = '/^([^.]+)$/';
            } else {
                $filter = $argv[2];
                $all_regex = '(.+?)';
                if (substr($filter, -1) === '.') {
                    $filter = substr_replace($filter, '$', -1);
                    $all_regex = '([^.]+?)';
                }
                if (substr($filter, 0, 1) !== '*') {
                    $filter = '^'. $filter;
                }
                $filter = str_replace('.', '\.', $filter);
                $filter = str_replace('*', $all_regex, $filter);
                $filter = '/'. $filter .'/';
            }
        }
        try {
            $listFolderContents = $dropbox->listFolder(DROPBOX_ROOT . $subpath);
        } catch (\Kunnu\Dropbox\Exceptions\DropboxClientException $e) {
            $json = json_decode($e->getMessage(), true);
            echo $json['error_summary'], "\n\n";
            exit;
        }
        $items = $listFolderContents->getItems();
        foreach ($items->all() as $entry) {
            if ($filter) {
                $filename = basename($entry->path_display);
                if (!preg_match($filter, $filename)) {
                    continue;
                }
            }

            echo date("Y-m-d H:i:s", strtotime($entry->client_modified));
            if (!property_exists($entry, 'size')) {
                echo "    <DIR>         ";
            } else {
                echo str_pad(number_format($entry->size), 18, " ", STR_PAD_LEFT);
            }
            echo " ", basename($entry->path_display), "\n";
        }
        break;

    case "get":
        if (!isset($argv[2])) {
            echo "Missing filename!\n";
            exit;
        }
        $full_filename = $argv[2];
        $out_file = basename($argv[2]);
        echo "copy dropbox:/". DROPBOX_ROOT ."/". $full_filename ." to ". CURRENT_PATH ."/". $out_file, "\n";

        $file = $dropbox->download(DROPBOX_ROOT ."/". $full_filename);
        $contents = $file->getContents();
        file_put_contents($out_file, $contents);
        break;

    case "put":
        if (!isset($argv[2])) {
            echo "Missing filename!\n";
            exit;
        }
        if (strpos($argv[2], "/") === 0) {
            $full_filename = $argv[2];
        } else {
            $full_filename = CURRENT_PATH ."/". $argv[2];
        }
        if (isset($argv[3])) {
            $basename = basename($argv[3]);
            $path = "/" . dirname($argv[3]) . "/";
        } else {
            $basename = basename($argv[2]);
            $path = "/";
        }
        echo "copy ". $full_filename ." to dropbox:/". DROPBOX_ROOT . $path . $basename. "\n";

        $dropboxFile = new DropboxFile($full_filename);
        $put = $dropbox->upload($dropboxFile, DROPBOX_ROOT . $path . $basename, ['mode' => 'overwrite']);
        break;

    case "del":
        if (!isset($argv[2])) {
            echo "Missing filename!\n";
            exit;
        }
        $full_filename = $argv[2];
        if (substr($full_filename, 0, 1) != '/') {
            $full_filename = '/'. $full_filename;
        }
        echo "delete dropbox:/". DROPBOX_ROOT . $full_filename . "\n";
        $del = $dropbox->delete(DROPBOX_ROOT . $full_filename);
        break;

    case "cp":
        if (!isset($argv[2])) {
            echo "Missing FROM filename!\n";
            exit;
        }
        if (!isset($argv[3])) {
            echo "Missing TO filename!\n";
            exit;
        }
        if (substr($argv[2], 0, 1) != '/') {
            $argv[2] = '/'. $argv[2];
        }
        if (substr($argv[3], 0, 1) != '/') {
            $argv[3] = '/'. $argv[3];
        }
        
        echo "copy dropbox:/". DROPBOX_ROOT . $argv[2] . " to dropbox:/". DROPBOX_ROOT . $argv[3] . "\n";
        $cp = $dropbox->copy(DROPBOX_ROOT . $argv[2], DROPBOX_ROOT . $argv[3]);
        //var_dump($cp);
        break;

    case "copyref":
        if (!isset($argv[2])) {
            echo "Missing FROM ref!\n";
            exit;
        }
        if (!isset($argv[3])) {
            echo "Missing TO filename!\n";
            exit;
        }
        if (substr($argv[3], 0, 1) != '/') {
            $argv[3] = '/'. $argv[3];
        }
        echo "copy dropbox:~". $argv[2] . " to dropbox:/". DROPBOX_ROOT . $argv[3] . "\n";
        $cp = $dropbox->saveCopyReference(DROPBOX_ROOT . $argv[3], $argv[2]);
        break;

    case "getref":
        if (!isset($argv[2])) {
            echo "Missing the file or folder!\n";
            exit;
        }
        if (substr($argv[2], 0, 1) != '/') {
            $argv[2] = '/'. $argv[2];
        }
        $copyReference = $dropbox->getCopyReference(DROPBOX_ROOT . $argv[2]);
        $ref = $copyReference->getReference();
        echo $ref, "\n";
        break;

    case "account":
        $account = $dropbox->getCurrentAccount();
        print_r($account);
        break;

    default:
        show_help();
}
echo "\n";
return;

/*******************
 * functions below *
 *******************/

function show_help()
{
    echo <<<HELP
Usage:  dropbox ls
        dropbox get filename
        dropbox put filename
        dropbox del filename
        dropbox cp  from_file to_file
        dropbox getref filename
        dropbox copyref from_ref to_file

HELP;
}
